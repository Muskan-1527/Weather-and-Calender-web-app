{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Weather-and-Calender-web-app\\\\weather_and_calender_web_app\\\\src\\\\weather_app.js\";\nimport React from 'react';\nimport Weather from './weather_app_component/weather_component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './weather_app_component/weather_form_component';\n\nclass WeatherApp extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      const country = e.target.elements.country.value;\n      const city = e.target.elements.city.value;\n      e.preventDefault();\n\n      if (country && city) {\n        const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/forecast/daily?q=\".concat(city, \",\").concat(country, \"&APPID=c10e7100063f10864ba3ffb839aed7f3\"));\n        const response = await api_call.json();\n        this.setState({\n          city: response.city.name,\n          country: response.city.country,\n          celsius: this.calCelsius(response.list[0].temp.day),\n          temp_max: this.calCelsius(response.list[0].temp.max),\n          temp_min: this.calCelsius(response.list[0].temp.min),\n          description: response.list[0].weather[0].description,\n          humidity: response.list[0].humidity,\n          pressure: response.list[0].pressure,\n          icon: response.list[0].weather[0].icon,\n          date1: new date(),\n          error: false\n        });\n        this.getWeatherImage(response.list[0].weather[0].id);\n        console.log(response);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      humidity: undefined,\n      pressure: undefined,\n      icon: undefined,\n      date1: undefined,\n      src: '/all_weather.jpg',\n      error: false\n    };\n  }\n\n  getWeatherImage(ID) {\n    switch (true) {\n      case ID >= 200 && ID <= 232:\n        this.setState({\n          src: '/thunderstorm.jpg'\n        });\n        break;\n\n      case ID >= 300 && ID <= 321:\n        this.setState({\n          src: '/drizzle.jpg'\n        });\n        break;\n\n      case ID >= 500 && ID <= 531:\n        this.setState({\n          src: '/rain.jpg'\n        });\n        break;\n\n      case ID >= 600 && ID <= 622:\n        this.setState({\n          src: '/snow.jpg'\n        });\n        break;\n\n      case ID >= 701 && ID <= 781:\n        this.setState({\n          src: '/atmosphere.jpg'\n        });\n        break;\n\n      case ID === 800:\n        this.setState({\n          src: '/clear_sky.jpg'\n        });\n        break;\n\n      case ID >= 801 && ID <= 804:\n        this.setState({\n          src: '/clouds.jpg'\n        });\n        break;\n\n      default:\n        this.setState({\n          src: '/all_weather.jpg'\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      src: this.state.src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      city: this.state.city,\n      country: this.state.country,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      humidity: this.state.humidity,\n      pressure: this.state.pressure,\n      icon: this.state.icon,\n      date1: this.state.date1,\n      src: this.state.src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WeatherApp;","map":{"version":3,"sources":["C:\\Users\\LENOVO\\Desktop\\Weather-and-Calender-web-app\\weather_and_calender_web_app\\src\\weather_app.js"],"names":["React","Weather","Form","WeatherApp","Component","constructor","getWeather","e","country","target","elements","value","city","preventDefault","api_call","fetch","response","json","setState","name","celsius","calCelsius","list","temp","day","temp_max","max","temp_min","min","description","weather","humidity","pressure","icon","date1","date","error","getWeatherImage","id","console","log","state","undefined","main","src","ID","cell","Math","floor","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Weather from './weather_app_component/weather_component';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from './weather_app_component/weather_form_component';\r\n\r\nclass WeatherApp extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country:undefined,\r\n      main:undefined,\r\n      celsius:undefined,\r\n      temp_max:undefined,\r\n      temp_min:undefined,\r\n      description:\"\",\r\n      humidity:undefined,\r\n      pressure:undefined,\r\n      icon:undefined,\r\n      date1:undefined,\r\n      src:'/all_weather.jpg',\r\n      error:false\r\n    };\r\n  }\r\n\r\n  getWeatherImage(ID) {\r\n    switch(true) {\r\n        case ID>=200 && ID<=232:\r\n            this.setState({\r\n                src : '/thunderstorm.jpg'\r\n            });\r\n            break;\r\n        case ID>=300 && ID<=321:\r\n                this.setState({\r\n                    src : '/drizzle.jpg'\r\n                });\r\n            break;\r\n        case ID>=500 && ID<=531:\r\n                this.setState({\r\n                    src : '/rain.jpg'\r\n                });\r\n            break;\r\n        case ID>=600 && ID<=622:\r\n                this.setState({\r\n                    src : '/snow.jpg'\r\n                });\r\n                break;\r\n        case ID>=701 && ID<=781:\r\n                this.setState({\r\n                    src : '/atmosphere.jpg'\r\n                });\r\n            break;\r\n        case ID===800:\r\n                this.setState({\r\n                    src : '/clear_sky.jpg'\r\n                });\r\n            break;\r\n        case ID>=801 && ID<=804:\r\n                this.setState({\r\n                    src : '/clouds.jpg'\r\n                });\r\n            break;\r\n      default:\r\n        this.setState({\r\n          src : '/all_weather.jpg'\r\n        });\r\n    }\r\n}\r\n\r\n\r\n  calCelsius(temp){\r\n    let cell=Math.floor(temp-273.15);\r\n    return cell;\r\n  }\r\n  \r\n\r\n  getWeather = async e => {\r\n\r\n    const country = e.target.elements.country.value;\r\n    const city = e.target.elements.city.value;\r\n\r\n      e.preventDefault();\r\n\r\n    if(country && city){\r\n    const api_call = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/forecast/daily?q=${city},${country}&APPID=c10e7100063f10864ba3ffb839aed7f3`\r\n      );\r\n  \r\n    const response = await api_call.json();\r\n\r\n    this.setState({\r\n      city:response.city.name,\r\n      country:response.city.country,\r\n      celsius:this.calCelsius(response.list[0].temp.day),\r\n      temp_max:this.calCelsius(response.list[0].temp.max),\r\n      temp_min:this.calCelsius(response.list[0].temp.min),\r\n      description:response.list[0].weather[0].description,\r\n      humidity:response.list[0].humidity,\r\n      pressure:response.list[0].pressure,\r\n      icon:response.list[0].weather[0].icon,\r\n      date1:new date(),\r\n      error: false\r\n    });\r\n    this.getWeatherImage(response.list[0].weather[0].id);\r\n    console.log(response);\r\n  }else {\r\n    this.setState({\r\n      error:true\r\n    });\r\n  }\r\n  \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form loadweather={this.getWeather} error={this.state.error} src={this.state.src}/>\r\n        \r\n      <Weather \r\n      city={this.state.city} \r\n      country={this.state.country} \r\n      temp_celsius={this.state.celsius}\r\n      temp_max={this.state.temp_max}\r\n      temp_min={this.state.temp_min}\r\n      description={this.state.description}\r\n      humidity={this.state.humidity}\r\n      pressure={this.state.pressure}\r\n      icon={this.state.icon}\r\n      date1={this.state.date1}\r\n      src={this.state.src}\r\n      />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default WeatherApp;\r\n"]},"metadata":{},"sourceType":"module"}